section .text
    global _start

_start:
    mov eax, x      ; pointer to array
    mov ebx, 0      ; EBX will store the sum
    mov ecx, 5      ; number of elements

top:
    add bl, [eax]   ; add element to sum
    inc eax         ; move to next element
    loop top

done:
    mov ax, bx      ; move sum into AX
    mov cx, 10
    xor dx, dx
    div cx          ; AX / 10 â†’ AL = tens, DL = ones

    add al, '0'     ; convert tens to ASCII
    mov [sum], al

    add dl, '0'     ; convert ones to ASCII
    mov [sum+1], dl

    mov byte [sum+2], 0xA ; newline

display:
    mov edx, 3      ; length of output (2 digits + newline)
    mov ecx, sum    ; message to write
    mov ebx, 1      ; file descriptor (stdout)
    mov eax, 4      ; sys_write
    int 0x80

    mov eax, 1      ; sys_exit
    int 0x80

section .data
x:  db 12, 15, 20, 18, 10  ; sample 2-digit numbers

sum: times 4 db 0          ; space for result